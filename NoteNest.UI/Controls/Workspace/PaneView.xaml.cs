using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Animation;
using Microsoft.Extensions.DependencyInjection;
using NoteNest.UI.ViewModels.Workspace;
using NoteNest.UI.Services;

namespace NoteNest.UI.Controls.Workspace
{
    /// <summary>
    /// Individual pane view that displays tabs
    /// Part of Milestone 2A: Split View
    /// Enhanced in Milestone 2B: Drag & Drop
    /// Enhanced in Modernization: Tab Overflow with Scroll Buttons
    /// </summary>
    public partial class PaneView : UserControl, IDisposable
    {
        private TabDragHandler _dragHandler;
        
        // Tab scrolling components
        private ScrollViewer _tabScrollViewer;
        private Button _scrollLeftButton;
        private Button _scrollRightButton;
        private const double SCROLL_AMOUNT = 200; // Pixels per click (~1 tab width)
        
        public static readonly DependencyProperty ShowPaneCloseButtonProperty =
            DependencyProperty.Register("ShowPaneCloseButton", typeof(bool), typeof(PaneView), new PropertyMetadata(false));
        
        public bool ShowPaneCloseButton
        {
            get => (bool)GetValue(ShowPaneCloseButtonProperty);
            set => SetValue(ShowPaneCloseButtonProperty, value);
        }
        
        // Note: TabControlElement is auto-generated from XAML (x:Name="TabControlElement")
        
        public PaneView()
        {
            InitializeComponent();
            
            // Initialize drag & drop handler (Enhanced with tear-out support)
            // TabControlElement is auto-generated by XAML from x:Name
            InitializeDragHandler();
            
            // Initialize tab scrolling after template is loaded
            Loaded += OnPaneViewLoaded;
            
            // Context menu event subscription will be handled when menu is first accessed
            
            System.Diagnostics.Debug.WriteLine("[PaneView] Initialized with drag & drop support");
        }
        
        /// <summary>
        /// Initialize drag handler with WindowManager injection for tear-out support
        /// </summary>
        private void InitializeDragHandler()
        {
            try
            {
                // Get WindowManager from service provider for tear-out functionality
                IWindowManager windowManager = null;
                
                // Access the application's service provider
                var app = System.Windows.Application.Current as NoteNest.UI.App;
                if (app?.ServiceProvider != null)
                {
                    windowManager = app.ServiceProvider.GetService<IWindowManager>();
                    
                    if (windowManager != null)
                    {
                        System.Diagnostics.Debug.WriteLine("[PaneView] WindowManager injected - tear-out functionality enabled");
                    }
                    else
                    {
                        System.Diagnostics.Debug.WriteLine("[PaneView] WindowManager not available - tear-out functionality disabled");
                    }
                }
                
                // Create TabDragHandler with or without WindowManager
                _dragHandler = new TabDragHandler(TabControlElement, this, windowManager);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"[PaneView] Failed to inject WindowManager: {ex.Message}");
                // Fallback to basic drag handler without tear-out support
                _dragHandler = new TabDragHandler(TabControlElement, this);
            }
        }
        
        private void OnPaneViewLoaded(object sender, RoutedEventArgs e)
        {
            // Get template parts from TabControl custom template
            InitializeTabScrolling();
        }
        
        private void InitializeTabScrolling()
        {
            try
            {
                // Find template parts in the TabControl template
                _tabScrollViewer = FindTemplateChild<ScrollViewer>(TabControlElement, "PART_TabScrollViewer");
                _scrollLeftButton = FindTemplateChild<Button>(TabControlElement, "PART_ScrollLeftButton");
                _scrollRightButton = FindTemplateChild<Button>(TabControlElement, "PART_ScrollRightButton");
                
                if (_tabScrollViewer == null || _scrollLeftButton == null || _scrollRightButton == null)
                {
                    System.Diagnostics.Debug.WriteLine("[PaneView] Warning: Could not find tab scroll template parts");
                    return;
                }
                
                // Wire up scroll event
                _tabScrollViewer.ScrollChanged += TabScrollViewer_ScrollChanged;
                _tabScrollViewer.SizeChanged += TabScrollViewer_SizeChanged;
                
                // Initial state
                UpdateNavigationButtonStates();
                
                System.Diagnostics.Debug.WriteLine("[PaneView] Tab scrolling initialized successfully");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"[PaneView] Tab scrolling initialization failed: {ex.Message}");
            }
        }
        
        /// <summary>
        /// Find a named child element in the visual tree
        /// </summary>
        private T FindTemplateChild<T>(FrameworkElement element, string name) where T : FrameworkElement
        {
            if (element == null) return null;
            
            // Try to get template and find named part
            if (element is Control control)
            {
                control.ApplyTemplate();
                var child = control.Template?.FindName(name, control) as T;
                if (child != null) return child;
            }
            
            return null;
        }
        
        /// <summary>
        /// Activate pane when user clicks anywhere in it
        /// </summary>
        private void Border_PreviewMouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            ActivateThisPane();
        }
        
        private void TabControl_GotFocus(object sender, RoutedEventArgs e)
        {
            ActivateThisPane();
        }
        
        private void ActivateThisPane()
        {
            if (DataContext is PaneViewModel paneVm)
            {
                var workspace = FindWorkspaceViewModel();
                if (workspace != null && workspace.ActivePane != paneVm)
                {
                    workspace.ActivePane = paneVm;
                    System.Diagnostics.Debug.WriteLine($"[PaneView] Pane activated: {paneVm.Id}");
                }
            }
        }
        
        private void CloseTab_Click(object sender, RoutedEventArgs e)
        {
            if (sender is System.Windows.Controls.Button button && button.Tag is TabViewModel tab)
            {
                // Check if we're in a detached window
                var window = Window.GetWindow(this);
                if (window is NoteNest.UI.Windows.DetachedWindow detachedWindow)
                {
                    // Use detached window's close tab command
                    var detachedVm = detachedWindow.DataContext as NoteNest.UI.ViewModels.Windows.DetachedWindowViewModel;
                    if (detachedVm?.CloseTabCommand?.CanExecute(tab) == true)
                    {
                        detachedVm.CloseTabCommand.Execute(tab);
                    }
                }
                else
                {
                    // Use workspace's close tab command
                    var workspace = FindWorkspaceViewModel();
                    if (workspace?.CloseTabCommand?.CanExecute(tab) == true)
                    {
                        workspace.CloseTabCommand.Execute(tab);
                    }
                }
            }
        }
        
        /// <summary>
        /// Handle middle-click to close tab (Tier 1 Feature)
        /// Industry standard behavior from browsers and IDEs
        /// </summary>
        private void TabHeader_PreviewMouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            // Middle mouse button closes tab
            if (e.MiddleButton == System.Windows.Input.MouseButtonState.Pressed)
            {
                if (sender is FrameworkElement element && element.Tag is TabViewModel tab)
                {
                    // Check if we're in a detached window
                    var window = Window.GetWindow(this);
                    if (window is NoteNest.UI.Windows.DetachedWindow detachedWindow)
                    {
                        // Use detached window's close tab command
                        var detachedVm = detachedWindow.DataContext as NoteNest.UI.ViewModels.Windows.DetachedWindowViewModel;
                        if (detachedVm?.CloseTabCommand?.CanExecute(tab) == true)
                        {
                            detachedVm.CloseTabCommand.Execute(tab);
                            e.Handled = true; // Prevent other actions
                        }
                    }
                    else
                    {
                        // Use workspace's close tab command
                        var workspace = FindWorkspaceViewModel();
                        if (workspace?.CloseTabCommand?.CanExecute(tab) == true)
                        {
                            workspace.CloseTabCommand.Execute(tab);
                            e.Handled = true; // Prevent other actions
                        }
                    }
                }
            }
        }
        
        private void ClosePane_Click(object sender, RoutedEventArgs e)
        {
            var workspace = FindWorkspaceViewModel();
            if (workspace?.ClosePaneCommand?.CanExecute(null) == true)
            {
                workspace.ClosePaneCommand.Execute(null);
            }
        }
        
        private WorkspaceViewModel FindWorkspaceViewModel()
        {
            // Walk up the visual tree to find WorkspaceViewModel
            var current = this as FrameworkElement;
            while (current != null)
            {
                if (current.DataContext is WorkspaceViewModel workspace)
                    return workspace;
                
                current = System.Windows.Media.VisualTreeHelper.GetParent(current) as FrameworkElement;
            }
            
            // Fallback: Check Window.DataContext
            var window = Window.GetWindow(this);
            if (window?.DataContext is NoteNest.UI.ViewModels.Shell.MainShellViewModel shell)
            {
                return shell.Workspace;
            }
            
            return null;
        }
        
        #region Tier 1 Features: Context Menu Handlers
        
        private void ContextMenu_CloseTab_Click(object sender, RoutedEventArgs e)
        {
            if (sender is MenuItem menuItem && menuItem.Tag is TabViewModel tab)
            {
                // Check if we're in a detached window
                var window = Window.GetWindow(this);
                if (window is NoteNest.UI.Windows.DetachedWindow detachedWindow)
                {
                    // Use detached window's close tab command
                    var detachedVm = detachedWindow.DataContext as NoteNest.UI.ViewModels.Windows.DetachedWindowViewModel;
                    if (detachedVm?.CloseTabCommand?.CanExecute(tab) == true)
                    {
                        detachedVm.CloseTabCommand.Execute(tab);
                    }
                }
                else
                {
                    // Use workspace's close tab command
                    var workspace = FindWorkspaceViewModel();
                    if (workspace?.CloseTabCommand?.CanExecute(tab) == true)
                    {
                        workspace.CloseTabCommand.Execute(tab);
                    }
                }
            }
        }
        
        private void ContextMenu_CloseOtherTabs_Click(object sender, RoutedEventArgs e)
        {
            if (sender is MenuItem menuItem && menuItem.Tag is TabViewModel tab)
            {
                var workspace = FindWorkspaceViewModel();
                if (workspace?.CloseOtherTabsCommand?.CanExecute(tab) == true)
                {
                    workspace.CloseOtherTabsCommand.Execute(tab);
                }
            }
        }
        
        private void ContextMenu_CloseAllTabs_Click(object sender, RoutedEventArgs e)
        {
            var workspace = FindWorkspaceViewModel();
            if (workspace?.CloseAllTabsCommand?.CanExecute(null) == true)
            {
                workspace.CloseAllTabsCommand.Execute(null);
            }
        }
        
        private void ContextMenu_MoveToOtherPane_Click(object sender, RoutedEventArgs e)
        {
            if (sender is MenuItem menuItem && menuItem.Tag is TabViewModel tab)
            {
                var workspace = FindWorkspaceViewModel();
                if (workspace?.MoveToOtherPaneCommand?.CanExecute(tab) == true)
                {
                    workspace.MoveToOtherPaneCommand.Execute(tab);
                }
            }
        }
        
        /// <summary>
        /// Detach single tab to new window (Tear-Out functionality)
        /// </summary>
        private void ContextMenu_DetachTab_Click(object sender, RoutedEventArgs e)
        {
            if (sender is MenuItem menuItem && menuItem.Tag is TabViewModel tab)
            {
                var workspace = FindWorkspaceViewModel();
                if (workspace?.DetachTabCommand?.CanExecute(tab) == true)
                {
                    workspace.DetachTabCommand.Execute(tab);
                }
            }
        }
        
        /// <summary>
        /// Detach all other tabs to new window
        /// </summary>
        private void ContextMenu_DetachOtherTabs_Click(object sender, RoutedEventArgs e)
        {
            if (sender is MenuItem menuItem && menuItem.Tag is TabViewModel sourceTab)
            {
                var workspace = FindWorkspaceViewModel();
                if (workspace?.DetachOtherTabsCommand?.CanExecute(sourceTab) == true)
                {
                    workspace.DetachOtherTabsCommand.Execute(sourceTab);
                }
            }
        }
        
        /// <summary>
        /// Redock single tab to main window
        /// </summary>
        private void ContextMenu_RedockTab_Click(object sender, RoutedEventArgs e)
        {
            if (sender is MenuItem menuItem && menuItem.Tag is TabViewModel tab)
            {
                var workspace = FindWorkspaceViewModel();
                if (workspace?.RedockTabCommand?.CanExecute(tab) == true)
                {
                    workspace.RedockTabCommand.Execute(tab);
                }
            }
        }
        
        /// <summary>
        /// Redock all tabs in detached window to main window
        /// </summary>
        private void ContextMenu_RedockAllTabs_Click(object sender, RoutedEventArgs e)
        {
            var workspace = FindWorkspaceViewModel();
            if (workspace?.RedockAllTabsCommand?.CanExecute(null) == true)
            {
                workspace.RedockAllTabsCommand.Execute(null);
            }
        }
        
        /// <summary>
        /// Update context menu visibility based on window type
        /// </summary>
        private void OnContextMenuOpened(object sender, RoutedEventArgs e)
        {
            try
            {
                bool isDetachedWindow = IsInDetachedWindow();
                
                // Find menu items by traversing items since FindName doesn't work in DataTemplate
                var contextMenu = sender as ContextMenu;
                if (contextMenu != null)
                {
                    foreach (var item in contextMenu.Items)
                    {
                        if (item is MenuItem menuItem)
                        {
                            var header = menuItem.Header?.ToString();
                            if (header == "Redock to Main Window" || header == "Redock All Tabs")
                            {
                                menuItem.Visibility = isDetachedWindow ? Visibility.Visible : Visibility.Collapsed;
                                System.Diagnostics.Debug.WriteLine($"[PaneView] Set {header} visibility to {menuItem.Visibility}");
                            }
                        }
                    }
                }
                
                System.Diagnostics.Debug.WriteLine($"[PaneView] Context menu opened, detached window: {isDetachedWindow}");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"[PaneView] Error updating context menu: {ex.Message}");
            }
        }
        
        /// <summary>
        /// Determine if this PaneView is inside a DetachedWindow
        /// </summary>
        private bool IsInDetachedWindow()
        {
            try
            {
                var window = Window.GetWindow(this);
                return window is NoteNest.UI.Windows.DetachedWindow;
            }
            catch
            {
                return false;
            }
        }
        
        
        #endregion
        
        #region Tab Scrolling Logic
        
        private void ScrollLeftButton_Click(object sender, RoutedEventArgs e)
        {
            if (_tabScrollViewer == null) return;
            
            var newOffset = Math.Max(0, _tabScrollViewer.HorizontalOffset - SCROLL_AMOUNT);
            AnimateScroll(newOffset);
        }
        
        private void ScrollRightButton_Click(object sender, RoutedEventArgs e)
        {
            if (_tabScrollViewer == null) return;
            
            var maxOffset = _tabScrollViewer.ScrollableWidth;
            var newOffset = Math.Min(maxOffset, _tabScrollViewer.HorizontalOffset + SCROLL_AMOUNT);
            AnimateScroll(newOffset);
        }
        
        private void AnimateScroll(double targetOffset)
        {
            if (_tabScrollViewer == null) return;
            
            try
            {
                var animation = new DoubleAnimation
                {
                    From = _tabScrollViewer.HorizontalOffset,
                    To = targetOffset,
                    Duration = TimeSpan.FromMilliseconds(200),
                    EasingFunction = new CubicEase { EasingMode = EasingMode.EaseOut }
                };
                
                // Scroll to the target position smoothly
                _tabScrollViewer.BeginAnimation(ScrollViewer.HorizontalOffsetProperty, animation);
            }
            catch (Exception ex)
            {
                // Fallback to instant scroll if animation fails
                System.Diagnostics.Debug.WriteLine($"[PaneView] Animation failed, using instant scroll: {ex.Message}");
                _tabScrollViewer.ScrollToHorizontalOffset(targetOffset);
            }
        }
        
        private void TabScrollViewer_ScrollChanged(object sender, ScrollChangedEventArgs e)
        {
            UpdateNavigationButtonStates();
        }
        
        private void TabScrollViewer_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            // When the ScrollViewer resizes, update button visibility
            // (tabs might now fit without scrolling)
            UpdateNavigationButtonStates();
        }
        
        private void UpdateNavigationButtonStates()
        {
            if (_tabScrollViewer == null || _scrollLeftButton == null || _scrollRightButton == null)
                return;
            
            try
            {
                // Determine if there's overflow (tabs extend beyond visible area)
                var hasOverflow = _tabScrollViewer.ScrollableWidth > 0;
                
                // Show/hide buttons based on overflow
                _scrollLeftButton.Visibility = hasOverflow ? Visibility.Visible : Visibility.Collapsed;
                _scrollRightButton.Visibility = hasOverflow ? Visibility.Visible : Visibility.Collapsed;
                
                if (hasOverflow)
                {
                    // Enable/disable based on scroll position
                    _scrollLeftButton.IsEnabled = _tabScrollViewer.HorizontalOffset > 0;
                    _scrollRightButton.IsEnabled = _tabScrollViewer.HorizontalOffset < _tabScrollViewer.ScrollableWidth;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"[PaneView] UpdateNavigationButtonStates failed: {ex.Message}");
            }
        }
        
        #endregion
        
        public void Dispose()
        {
            // Clean up scroll viewer events
            if (_tabScrollViewer != null)
            {
                _tabScrollViewer.ScrollChanged -= TabScrollViewer_ScrollChanged;
                _tabScrollViewer.SizeChanged -= TabScrollViewer_SizeChanged;
            }
            
            _dragHandler?.Dispose();
            _dragHandler = null;
        }
    }
}

